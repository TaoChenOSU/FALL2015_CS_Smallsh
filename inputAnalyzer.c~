/*
//Input Analyzer
//Analyze user inputs, split them into
//individual strings, return a point to the array 
//of strings
//check if it is a comment, 
//return NULL
*/

#include "myLibrary.h"

void inputAnalyzer(char *userInput, struct argument *myArgu){
	int argc = 0;
	int i = 0;
	char **args;
	char *token;
	char backup[1024];						//Back-up user input second use of strtok
	strcpy(backup, userInput);
	
	//comment
	if(userInput[0] == '#'){
		myArgu->ground = -1;
		myArgu->args = NULL;
		return;
	}
	//======================

	token = strtok(userInput, " ");
	if(token != NULL){
		argc = 1;
		//Figure how many arguments are there	
		while(1){						//while true
			token = strtok(NULL, " ");
			if(token != NULL){
				argc++;
			}else{
				break;
			}						
		}
		//Allocate memory
		args = malloc(sizeof(char*) * (argc + 1));			//one more to put the NULL terminator at the end
		for(i = 0; i < argc; i++){
			args[i] = malloc(sizeof(char) * 150);		//Maximum 150 char long each argument
		}		
		//====================================

		//put the arguments into the array pf pointers
		token = strtok(backup, " ");
		strcpy(args[0], token);
		
		for(i = 1; i < argc; i++){
			token = strtok(NULL, " ");
			strcpy(args[i], token);
		}
		//====================================

		if(strcmp(args[i-1], "&") == 0){

			myArgu->ground = 1;
			args[i-1] = NULL;
			myArgu->args = args;
		}else{
			myArgu->ground = 0;
			args[i] = NULL;
			myArgu->args = args;
		}
	}else{
		myArgu->ground = -1;
		myArgu->args = NULL;	
	} 
}
