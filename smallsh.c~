/*
//Smallsh.c 
//main program
*/

#include "myLibrary.h"

int main(){
	char userInput[2048];
	struct argument myArgu;
	struct childStatus child; 
	int status;						//status of the last child process
	pid_t bgProcess;
	int i;							//counter

	do{
		//check any stopped or terminated bg processes
		while(1){
			bgProcess = waitpid(WAIT_ANY, &status, WNOHANG | WUNTRACED);
			if(bgProcess != 0 && bgProcess != -1){
				fflush(stdout);
				fprintf(stdout, "Process %d has finished with status:\n", bgProcess);
				displayStatus(status);	
			}else{
				break;			
			}
		}
		//===========================
		//Prompt
		fprintf(stdout, ": ");
		fgets(userInput, 2048, stdin);
		userInput[strlen(userInput)-1] = '\0';
		inputAnalyzer(userInput, &myArgu);		
		child = myFork(myArgu);

		if(child.pid > 0 && child.status == 0){		//It's a child process and it's foreground
			waitpid(child.pid, &status, 0);
		}else if(child.pid > 0 && child.status == 1){	//It's a child process and it's background
			fprintf(stdout, "%d\n", child.pid);
		}else if(child.pid == -2){
			switch (child.status){
				case 3:
					changeDir(myArgu);
					break;
				case 5:
					displayStatus(status);
					break;
			}
		}else if(child.pid == 0 && child.status == -1){//this would happen execvp fails
			return 1;
		}
		//free up the memory that is allocated to myArgu.args and myArgu.args[i] in function inputAnalyzer
		if(myArgu.args != NULL){
			i = 0;
			while(myArgu.args[i] != NULL){
				free(myArgu.args[i]);
				i++;
			}
			free(myArgu.args);
		}
		//==============================
	}while(child.status != 4);

	return 0;	
}

void changeDir(struct argument myArgu){
	int i=0;						//Counter
	//Figure out if there is too many arguments for cd
	while(myArgu.args[i] != NULL){
		i++;
	}
	if(i > 2){
		fprintf(stderr, "Too many Arguments fo cd\n");	
	}else if(i == 2){
		if(chdir(myArgu.args[1]) == -1){
			fprintf(stderr, "cd executed unsuccessfully\n");
		}	
	}else{
		if(chdir(getenv("HOME")) == -1){
			fprintf(stderr, "cd executed unsuccessfully\n");
		}	
	}
}

void displayStatus(int status){
	if(WIFEXITED(status)){
		fprintf(stdout, "Exit Status: %d\n", WEXITSTATUS(status));
	}else if(WIFSIGNALED(status)){
		fprintf(stdout, "Terminated by Signal %d\n", WTERMSIG(status));
	}
	//fprintf(stdout, "Status: %d\n", status);
}

